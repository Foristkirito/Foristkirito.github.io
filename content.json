[{"title":"ubuntu 16.04 Nginx HTTPS 反向代理","date":"2018-09-30T13:25:06.000Z","path":"2018/09/30/ubuntu-16-04-Ngnix-HTTPS-反向代理/","text":"安装 Nginx 参考 digitalocean 给出的教程，清晰明了 使用 Let’s Encrypt 获取 SSL 证书 点击 Let’s Encrypt 选择对应的操作系统和应用，如下图 选择完毕之后，按照提示的操作进行 SSL 证书的获取 配置 Nginx 打开 Nginx 的配置文件 sudo vim /etc/nginx/nginx.conf 在 http 下添加 server { listen 443 ssl; server_name your_site; ssl_certificate /etc/letsencrypt/live/your_site/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/your_site/privkey.pem; ssl_session_timeout 5m; location / { proxy_pass http://localhost:your_port; } } 注意修改对应的目录，以及本地运行的 http 服务的端口"},{"title":"linux 搭建 git server 转移仓库 并定时备份","date":"2018-09-29T15:04:12.000Z","path":"2018/09/29/linux-搭建-git-server，转移仓库，并定时备份/","text":"linux 搭建 git server 创建 git 用户来存放 git 仓库 sudo user del -r git sudo adduser git 如果需要禁止 git 用户通过 ssh 登录，可以编辑 /etc/passwd 文件，将类似于 git:x:1001:1001:,,,:/home/git:/bin/bash 改成 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell 安装 git-core sudo apt-get install git-core 初始化 git 仓库 git —bare init /home/git/my_repo.git 此时创建的是一个空的仓库，客户端 clone 下来后可以操作，也可以上传已有的仓库 clone 仓库 git clone git@server_ip:/home/git/my_repo.git 迁移已有的 git 仓库到 my_repo.git (上面创建的仓库) 假设我们已经有了 olg_repo.git 仓库，并 clone 到本地，在本地 cd 到 old_repo 仓库内，执行下列操作 fetch 远端仓库的所有修改 git fetch origin 查看本地哪些分支缺失，如果缺失，则 checkout 到本地 git branch -a * master remotes/origin/develop remotes/origin/master remotes/origin/release/0.1 checkout 副本到本地 git checkout -b develop origin/develop git checkout -b release/0.1 origin/release/0.1 在要迁移数据的目的仓库 my_repo 上创建新的远端分支 git remote add new-origin git@server_ip:/home/git/my_repo.git 推送源仓库 old_repo 的所有分支以及 tag 到目标仓库 my_repo git push --all new-origin git push --tags new-origin 将新的远端分支 new-origin 设置为默认 origin git remote rm origin git remote rename new-origin origin 这样源仓库的所有数据到迁移到了新的 git server 上 使用 rsync 工具备份 git server 的数据 有时候使用自己的 server 无法保证可靠性，因此可能需要定时将数据备份到远端的另一台主机上，这里选择的工具是 rsync ，使用 crontab 每天凌晨 3 点对远端备份的数据做增量覆盖 使用 crontab 建立定时触发的任务 crontab -e # 然后选择自己喜欢的编辑器，在最后一行添加如下 # Edit this file to introduce tasks to be run by cron. # # Each task to run has to be defined through a single line # indicating with different fields when the task will be run # and what command to run for the task # # To define the time you can provide concrete values for # minute (m), hour (h), day of month (dom), month (mon), # and day of week (dow) or use '*' in these fields (for 'any').# # Notice that tasks will be started based on the cron's system # daemon's notion of time and timezones. # # Output of the crontab jobs (including errors) is sent through # email to the user the crontab file belongs to (unless redirected). # # For example, you can run a backup of all your user accounts # at 5 a.m every week with: # 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/ # # For more information see the manual pages of crontab(5) and cron(8) # # m h dom mon dow command 0 3 * * * * rsync -av --delete -e &quot;ssh -i /path/to/id_rsa&quot; /homt/git/ remote_user@X.X.X.X:~/backup"}]